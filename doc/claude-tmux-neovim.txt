*claude-tmux-neovim.txt*  Neovim + Claude Code + tmux integration

==============================================================================
CONTENTS                                        *claude-tmux-neovim-contents*

    1. Introduction ................. |claude-tmux-neovim-introduction|
    2. Features ..................... |claude-tmux-neovim-features|
    3. Requirements ................. |claude-tmux-neovim-requirements|
    4. Installation ................. |claude-tmux-neovim-installation|
    5. Configuration ................ |claude-tmux-neovim-configuration|
    6. Usage ........................ |claude-tmux-neovim-usage|
    7. Commands ..................... |claude-tmux-neovim-commands|
    8. Keymaps ...................... |claude-tmux-neovim-keymaps|
    9. XML Format ................... |claude-tmux-neovim-xml|
    10. Architecture ................ |claude-tmux-neovim-architecture|
    11. Debugging ................... |claude-tmux-neovim-debugging|
    12. Tips ........................ |claude-tmux-neovim-tips|

==============================================================================
1. INTRODUCTION                              *claude-tmux-neovim-introduction*

`claude-tmux-neovim` is a Neovim plugin that seamlessly integrates with Claude 
Code via tmux. It allows you to send rich code context (file path, git root, 
line numbers, selection, full content) to Claude Code instances running in 
tmux panes with a single keystroke.

The plugin acts as a bridge between your Neovim editor and Claude Code running 
in tmux panes, enabling a smooth AI-assisted coding experience while 
maintaining your preferred environment.

==============================================================================
2. FEATURES                                    *claude-tmux-neovim-features*

- Send code context to Claude Code with a single keystroke (`<leader>cc`)
- Create new Claude Code instances and send context with a dedicated shortcut (`<leader>cn`)
- Works with visual selections for more targeted assistance in both normal and visual modes
- Git repository isolation - only shows Claude Code instances in the same repo
- Smart instance management:
  - Detects existing Claude Code instances in the correct git root with strict verification
  - Shows detection method in selection menu ([cmd], [node], [prompt], [renamed], etc.)
  - Automatically renames tmux windows to "claude" for consistency
  - Creates new instances if none exist with robust pane tracking
  - Includes retry mechanisms for tmux operations that might fail initially
  - Verifies created panes actually exist before attempting to use them
  - Provides fallback methods if the primary approach encounters issues
  - Shows animated loading indicator during Claude instance startup
- Automatically switches to Claude Code pane after sending context
  - Uses multi-step approach to ensure reliable window and pane selection
  - Includes verification and fallback mechanisms for window switching
- Automatically reloads Neovim buffers when focus returns from Claude Code
- Sends rich context in XML format optimized for LLMs
- Comprehensive debug mode for troubleshooting with detailed logging

==============================================================================
3. REQUIREMENTS                              *claude-tmux-neovim-requirements*

- Neovim 0.7.0 or newer
- tmux
- Claude Code CLI
- Git

==============================================================================
4. INSTALLATION                              *claude-tmux-neovim-installation*

Using a plugin manager is recommended for easier installation and updates.

Plugin Manager Installation:

lazy.nvim:
```lua
{
  "karlhepler/claude-tmux-neovim",
  config = function()
    require("claude-tmux-neovim").setup({
      -- your configuration
    })
  end,
}
```

packer.nvim:
```lua
use {
  "karlhepler/claude-tmux-neovim",
  config = function()
    require("claude-tmux-neovim").setup()
  end
}
```

vim-plug:
```vim
Plug 'karlhepler/claude-tmux-neovim'
```

Manual installation by cloning the repository:
```bash
git clone https://github.com/karlhepler/claude-tmux-neovim.git \
  ~/.local/share/nvim/site/pack/plugins/start/claude-tmux-neovim
```


==============================================================================
5. CONFIGURATION                            *claude-tmux-neovim-configuration*

You can configure the plugin in your Neovim config:

```lua
require("claude-tmux-neovim").setup({
  keymap = "<leader>cc",           -- Key binding for trigger
  keymap_new = "<leader>cn",       -- Key binding for new instance
  auto_switch_pane = true,         -- Auto switch to Claude pane
  auto_reload_buffers = true,      -- Auto reload buffers when focus returns
  debug = false,                   -- Enable debug logging
  
  -- Optional: custom XML template
  xml_template = [[
<context>
  <file_path>%s</file_path>
  <git_root>%s</git_root>
  <line_number>%s</line_number>
  <column_number>%s</column_number>
  <selection>%s</selection>
  <file_content>%s</file_content>
</context>]]
})
```

All configuration options:

`keymap` (string)
    The key mapping to trigger sending context to Claude Code.
    Default: "<leader>cc"

`keymap_new` (string)
    The key mapping to create a new Claude Code instance.
    Default: "<leader>cn"

    Note: 
    - `<leader>cc` creates new Claude instances with `claude --continue` when no instance exists
    - `<leader>cn` always creates new Claude instances with `claude` (no flags)

`auto_switch_pane` (boolean)
    Whether to automatically switch to the Claude Code pane after sending context.
    Default: true


`auto_reload_buffers` (boolean)
    Whether to automatically reload all buffers when focus returns to Neovim.
    Default: true

`debug` (boolean)
    Enable debug logging for troubleshooting.
    Default: false

`xml_template` (string)
    Custom XML template for formatting context sent to Claude Code.
    Default: see example above

==============================================================================
6. USAGE                                          *claude-tmux-neovim-usage*

1. Press `<leader>cc` (or your configured keymap) in normal or visual mode
   to send context to an existing Claude Code instance.
2. Press `<leader>cn` (or your configured keymap_new) in normal or visual mode
   to create a new Claude Code instance and send context to it.
3. If multiple Claude Code instances are found in the same git repository when
   using `<leader>cc`, you'll be prompted to select one from a clear table view
   showing session, window, pane, detection method, and content preview.
4. The plugin sends the file context to Claude Code and switches to that pane.
5. After interacting with Claude Code, when you switch back to Neovim, your
   buffers will automatically reload to reflect any changes.

In visual mode, only your selected code will be included in the XML context,
helping Claude Code focus on the specific portion you need help with. This
works for both `<leader>cc` and `<leader>cn`.

==============================================================================
7. COMMANDS                                    *claude-tmux-neovim-commands*

*:ClaudeCodeSend*
    Send the current file context to Claude Code.

*:ClaudeCodeNew*
    Create a new Claude Code instance and send context. Always uses plain "claude" command without flags.


*:ClaudeCodeReload*
    Manually reload all Neovim buffers from disk.

*:ClaudeCodeDebug*
    Toggle debug mode for troubleshooting.

*:ClaudeCodeShowLog*
    Show the debug log in a split window.

*:ClaudeCodeClearLog*
    Clear the debug log file.

==============================================================================
8. KEYMAPS                                      *claude-tmux-neovim-keymaps*

The plugin provides the following default keymaps:
- `<leader>cc` in both normal and visual mode to send context to Claude Code
- `<leader>cn` in both normal and visual mode to create a new Claude Code instance

You can change these by setting the `keymap` and `keymap_new` options in the setup function:

```lua
require("claude-tmux-neovim").setup({
  keymap = "<leader>c",  -- Use a different keymap
  -- other options...
})
```

If you set `keymap` to an empty string, no keymaps will be created.

==============================================================================
9. XML FORMAT                                      *claude-tmux-neovim-xml*

The plugin sends context to Claude Code in an XML format:

```xml
<context>
  <file_path>/path/to/file.lua</file_path>
  <git_root>/path/to/project</git_root>
  <line_number>42</line_number>
  <column_number>15</column_number>
  <selection>selected_text_here</selection>
  <file_content>full_file_content_here</file_content>
</context>
```

This format helps Claude Code understand the exact context of your code,
making its responses more relevant and accurate.

You can customize this format by setting the `xml_template` option in the
setup function. The template uses string.format with the following parameters:
1. file_path
2. git_root
3. line_number
4. column_number
5. selection (empty string if not in visual mode)
6. file_content

==============================================================================
10. ARCHITECTURE                            *claude-tmux-neovim-architecture*

The plugin uses a modular architecture for maintainability and organization:

- `init.lua` - Main entry point with public API
- `lib/config.lua` - Configuration management and state tracking
- `lib/util.lua` - Utility functions for file and text operations
- `lib/tmux.lua` - Tmux interaction and Claude Code instance management
- `lib/context.lua` - Context generation and XML formatting
- `lib/debug.lua` - Debug logging functionality
- `lib/silent.lua` - Handles silent operations for better UX

This modular design makes the codebase easier to understand, maintain, and extend.

==============================================================================
11. DEBUGGING                                *claude-tmux-neovim-debugging*

If you encounter issues with the plugin, you can enable debug mode to get
more detailed information:

1. Enable debug mode in your configuration:
   ```lua
   require("claude-tmux-neovim").setup({
     debug = true,
     -- other options...
   })
   ```

2. Or toggle debug mode during a session:
   ```
   :ClaudeCodeDebug
   ```

3. View the debug log:
   ```
   :ClaudeCodeShowLog
   ```

4. Clear the debug log if it gets too large:
   ```
   :ClaudeCodeClearLog
   ```

The debug log is stored at:
`vim.fn.stdpath('cache') .. '/claude-tmux-neovim-debug.log'`

The plugin includes extensive error handling and debugging information. When
debugging issues, look for these key log entries:

- Window and pane creation logs - Shows details about new Claude instances
- Pane verification steps - Confirms panes exist before using them
- Window selection operations - Details about switching to Claude panes
- Paste operation logs - Information about sending context to Claude
- Retry attempts - For operations that may need multiple attempts
- Fallback mechanisms - Alternative approaches when primary methods fail

Common issues and their solutions:
- If Claude instances aren't detected properly, ensure tmux windows with Claude are
  named "claude" or try using `:ClaudeCodeDebug` to see detection details
- If paste operations fail, check if the target pane is still active and receiving input
- If window switching doesn't work, try manually switching to the Claude window first
- For new instance creation issues, enable debug mode and check for any errors
  during window creation or pane selection
- If your instance is not found, the plugin may not recognize it in the git root;
  try using `:ClaudeCodeReset` to clear remembered instances

==============================================================================
12. TIPS                                         *claude-tmux-neovim-tips*

- Use `<leader>cc` in visual mode to send only selected code for review.
- Use `<leader>cn` in visual mode to create a new Claude instance with only selected code.
- **Simple Logic**: 0 instances → creates new one, 1 instance → uses it, 2+ instances → shows picker.
- If no Claude Code instances are found, a new one will be created automatically.
- **Performance Optimized**: Fast detection prioritizes current session before searching globally.
- For multi-project workflows, the plugin isolates instances by git repository.
- If Claude Code makes changes to your files, they'll be automatically reloaded
  when you return to Neovim. You can also manually reload with `:ClaudeCodeReload`.
- Detection methods in the selection menu help you identify how Claude instances were found:
  - [cmd]: Direct match with the Claude Code command name
  - [path]: Path-based match with the Claude Code command
  - [node]: Node.js process running Claude Code
  - [prompt]: Claude Code identified by distinctive prompt line (╭────╮ with │ > below it)
  - [proc]: Identified through process command line or environment variables
  - [name]: Identified by window name containing "claude"
  - [renamed]: Window was automatically renamed to "claude" for consistency
  - [other]: Other detection method
  - [auto]: Found by aggressive fallback detection
  - [new]: Newly created instance
  - [fast]: Found via optimized fast search in current session
- **Performance Improvements**: The plugin includes optimizations for speed:
  - Fast detection prioritizes windows named "claude" in current session first
  - Early Claude ready detection reduces wait times (max 1.8s instead of 2.0s)
  - Simplified verification reduces redundant shell command execution
- **Error Recovery**: Enhanced reliability includes:
  - Error handling wrapper prevents unexpected pane closing
  - Clear error messages for startup failures (auth issues, installation problems)
  - Automatic retries for paste operations that might fail initially
  - Verification that panes exist before attempting to use them
  - Fallback mechanisms if the primary approach encounters issues
  - Enhanced window and pane selection to ensure reliable switching
  - Animated loading indicator with early completion detection
- If the plugin seems stuck during instance creation, try running `:ClaudeCodeDebug`
  to enable detailed logging and then view it with `:ClaudeCodeShowLog`.
- The plugin now automatically renames tmux windows running Claude to "claude" for
  consistent detection and easier identification.
- If you encounter any issues with instance creation or detection, the debug logs
  contain detailed information about each step of the process.

==============================================================================
vim:tw=78:ts=8:ft=help:norl: